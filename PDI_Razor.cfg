/*-----------------------------------------------------------------------
* This Information is proprietary to Phase Dynamics Inc, Richardson, Texas 
* and MAY NOT be copied by any method or incorporated into another program
* without the express written consent of Phase Dynamics Inc. This information
* or any portion thereof remains the property of Phase Dynamics Inc.
* The information contained herein is believed to be accurate and Phase
* Dynamics Inc assumes no responsibility or liability for its use in any way
* and conveys no license or title under any patent or copyright and makes
* no representation or warranty that this Information is free from patent
* or copyright infringement.
*------------------------------------------------------------------------
*------------------------------------------------------------------------
* Contains all the code relevant to the static configuration. 
*-------------------------------------------------------------------------*/

var Defaults 		        = xdc.useModule('xdc.runtime.Defaults');
var Diags 			        = xdc.useModule('xdc.runtime.Diags');
var Error 			        = xdc.useModule('xdc.runtime.Error');
var SysStd 			        = xdc.useModule('xdc.runtime.SysStd');
var Main 			        = xdc.useModule('xdc.runtime.Main');
var Memory 			        = xdc.useModule('xdc.runtime.Memory');
var SysMin 			        = xdc.useModule('xdc.runtime.SysMin');
var System 			        = xdc.useModule('xdc.runtime.System');
var Text 			        = xdc.useModule('xdc.runtime.Text');
var Log 			        = xdc.useModule('xdc.runtime.Log');

var BIOS 			        = xdc.useModule('ti.sysbios.BIOS');
var Clock 			        = xdc.useModule('ti.sysbios.knl.Clock');
var Swi 			        = xdc.useModule('ti.sysbios.knl.Swi');
var Task 			        = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore 		        = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi 			        = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Cache 			        = xdc.useModule('ti.sysbios.family.c64p.Cache');
var CacheHal                = xdc.useModule("ti.sysbios.hal.Cache");
var ECM                     = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem 		        = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Timer 			        = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var Queue 			        = xdc.useModule('ti.sysbios.knl.Queue');
var HeapBuf			        = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var LoggingSetup 	        = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var Csl                     = xdc.useModule('ti.csl.Settings');
var usbSettings             = xdc.useModule('ti.drv.usb.Settings');

var Board                   = xdc.loadPackage('ti.board');
var Osal                    = xdc.loadPackage('ti.osal');
var Usb                     = xdc.loadPackage('ti.drv.usb');
var Fatfs                   = xdc.loadPackage('ti.fs.fatfs');
var Uart                    = xdc.loadPackage('ti.drv.uart');
var socType                 = "omapl138";
var osType                  = "tirtos";

/// Etc.
System.SupportProxy         = SysMin;
System.extendedFormats      = '%$L%$S%$F%f'; // MUST to run usb data logging
Text.isLoaded               = false; // no text print
Error.raiseHook             = null; // no error print
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF; // ignore assertion
Csl.deviceType              = socType;
BIOS.rtsGateType 	        = BIOS.GateSwi;
Uart.Settings.socType       = socType;
usbSettings.socType         = "omapl138";
Board.Settings.boardName    = "lcdkOMAPL138";
Osal.Settings.osType        = osType;
Osal.Settings.socType       = socType;
Task.checkStackFlag         = false;

///
/// stack 
///
Program.stack               = 0x1E8440; // 2 MB

///
/// heap (heapbuf)
///
var heapBufParams           = new HeapBuf.Params();
heapBufParams.blockSize     = 512;
heapBufParams.numBlocks     = 4000; // 2MB
heapBufParams.sectionName   = "sysHeap";
Program.global.sysHeap      = HeapBuf.create(heapBufParams);
Program.sectMap["sysHeap"]  = "DDR";
Memory.defaultHeapInstance  = Program.global.sysHeap;

///
/// task (task stack)
///
var task1Params             = new Task.Params();
task1Params.stackSize       = 0x3D0900; // 4 MB
task1Params.vitalTaskFlag   = true;
task1Params.priority   		= 15;
task1Params.instance.name   = "Menu_task";
Program.global.Menu_task    = Task.create("&Process_Menu", task1Params);

var task2Params             = new Task.Params();
task2Params.stackSize       = 0x1E8440; // 2 MB
task2Params.vitalTaskFlag   = true;
task2Params.priority   		= 14;
task2Params.instance.name   = "logData_task";
Program.global.logData_task = Task.create("&logData", task2Params);

var task3Params             = new Task.Params();
task3Params.stackSize       = 0xFFFFF; // 1 MB
task3Params.vitalTaskFlag   = true;
task3Params.priority   		= 12;
task3Params.instance.name   = "i2c_temp_task";
Program.global.i2c_temp_task = Task.create("&I2C_ADC_Read_Temp", task3Params);

var task4Params             = new Task.Params();
task4Params.stackSize       = 0xFFFFF; // 1 MB
task4Params.vitalTaskFlag   = true;
task4Params.priority   		= 12;
task4Params.instance.name   = "i2c_vref_task";
Program.global.i2c_vref_task = Task.create("&I2C_ADC_Read_VREF", task4Params);

var task5Params             = new Task.Params();
task5Params.stackSize       = 0xFFFFF; // 1 MB
task5Params.vitalTaskFlag   = true;
task5Params.priority   		= 12;
task5Params.instance.name   = "i2c_rrtc_task";
Program.global.i2c_rrtc_task = Task.create("&I2C_DS1340_Read_RTC", task5Params);

var task6Params             = new Task.Params();
task6Params.stackSize       = 0xFFFFF; // 1 MB
task6Params.vitalTaskFlag   = true;
task6Params.priority   		= 12;
task6Params.instance.name   = "i2c_density_task";
Program.global.i2c_density_task = Task.create("&I2C_ADC_Read_Density", task6Params);

var task7Params             = new Task.Params();
task7Params.stackSize       = 0xFFFFF; // 1 MB
task7Params.vitalTaskFlag   = true;
task7Params.priority   		= 12;
task7Params.instance.name   = "i2c_wrtc_task";
Program.global.i2c_wrtc_task = Task.create("&I2C_DS1340_Write_RTC", task7Params);

var task8Params             = new Task.Params();
task8Params.stackSize       = 0xFFFFF; // 1 MB
task8Params.vitalTaskFlag   = true;
task8Params.priority   		= 12;
task8Params.instance.name   = "i2c_ao_task";
Program.global.i2c_ao_task  = Task.create("&I2C_Update_AO", task8Params);

/////////////////////////////////////////////////
/// clocks
/////////////////////////////////////////////////

Clock.tickPeriod 	        = 150; // 150 us per tick

var clock0Params            = new Clock.Params();
clock0Params.instance.name  = "MB_Start_Clock_Int16";
clock0Params.period         = 0;
Program.global.MB_Start_Clock_Int16 = Clock.create("&MB_SendPacket_Int16", 24, clock0Params);

var clock1Params            = new Clock.Params();
clock1Params.instance.name  = "MB_End_Clock";
clock1Params.period         = 0;
clock1Params.arg            = null;
Program.global.MB_End_Clock = Clock.create("&MB_PacketDone", 24, clock1Params);

var clock2Params            = new Clock.Params();
clock2Params.instance.name  = "MB_Start_Clock_Float";
Program.global.MB_Start_Clock_Float = Clock.create("&MB_SendPacket_Float", 24, clock2Params);

var clock3Params            = new Clock.Params();
clock3Params.instance.name  = "MB_Start_Clock_Coil";
Program.global.MB_Start_Clock_Coil = Clock.create("&MB_SendPacket_Coil", 24, clock3Params);

var clock4Params            = new Clock.Params();
clock4Params.instance.name  = "MB_Watchdog_Timeout_Clock";
clock4Params.arg            = null;
Program.global.MB_Watchdog_Timeout_Clock = Clock.create("&MB_Watchdog_Timeout", 12, clock4Params);

var clock5Params            = new Clock.Params();
clock5Params.instance.name  = "I2C_LCD_Clock";
clock5Params.period         = 33;
Program.global.I2C_LCD_Clock = Clock.create("&I2C_LCD_ClockFxn", 200, clock5Params);

var clock6Params            = new Clock.Params();
clock6Params.instance.name  = "Process_Menu_Clock";
clock6Params.period         = 1000;
Program.global.Process_Menu_Clock = Clock.create("&ISR_Process_Menu", 1000, clock6Params);

var clock7Params0           = new Clock.Params();
clock7Params0.instance.name = "DebounceMBVE_Clock";
Program.global.DebounceMBVE_Clock = Clock.create("&DebounceMBVE", 666, clock7Params0);

var clock9Params            = new Clock.Params();
clock9Params.instance.name  = "MB_Start_Clock_LongInt";
Program.global.MB_Start_Clock_LongInt = Clock.create("&MB_SendPacket_LongInt", 24, clock9Params);

var clock11Params           = new Clock.Params();
clock11Params.instance.name = "I2C_Pulse_MBVE_Clock";
Program.global.I2C_Pulse_MBVE_Clock = Clock.create("&I2C_Pulse_MBVE", 100, clock11Params); // 100 ticks

var clock12Params           = new Clock.Params();
clock12Params.instance.name = "I2C_Start_Pulse_MBVE_Clock";
clock12Params.startFlag     = false;
clock12Params.period        = 0;
Program.global.I2C_Start_Pulse_MBVE_Clock = Clock.create("&I2C_Start_Pulse_MBVE", 400, clock12Params); // FIXED BY DKOH BUG#51 - Jun 11, 2019
//Program.global.I2C_Start_Pulse_MBVE_Clock = Clock.create("&I2C_Start_Pulse_MBVE", 800, clock12Params); // FIXED BY DKOH BUG#51 - Jun 11, 2019

var clock21Params           = new Clock.Params();
clock21Params.instance.name = "MB_Start_Clock_Sample";
Program.global.MB_Start_Clock_Sample = Clock.create("&MB_SendPacket_Sample", 24, clock21Params);

var clock13Params           = new Clock.Params();
clock13Params.instance.name = "I2C_Pulse_MBVE_Clock_Retry";
Program.global.I2C_Pulse_MBVE_Clock_Retry = Clock.create("&I2C_Pulse_MBVE", 40, clock13Params);

var clock14Params           = new Clock.Params();
clock14Params.instance.name = "Update_Relays_Clock";
clock14Params.period        = 3333;
Program.global.Update_Relays_Clock = Clock.create("&Update_Relays", 10000, clock14Params);

var clock22Params           = new Clock.Params();
clock22Params.instance.name = "MB_Start_Clock_ForceSlaveAddr";
Program.global.MB_Start_Clock_ForceSlaveAddr = Clock.create("&MB_SendPacket_ForceSlaveAddr", 24, clock22Params);

var clock24Params           = new Clock.Params();
clock24Params.instance.name = "I2C_Pulse_MBVE_Clock_Short";
Program.global.I2C_Pulse_MBVE_Clock_Short = Clock.create("&I2C_Pulse_MBVE", 40, clock24Params);

var clock27Params           = new Clock.Params();
clock27Params.instance.name = "Capture_Sample_Clock";
Program.global.Capture_Sample_Clock = Clock.create("&Capture_Sample", 6666, clock27Params);

var clock31Params           = new Clock.Params();
clock31Params.instance.name = "I2C_ADC_Read_Density_Callback_Clock";
Program.global.I2C_ADC_Read_Density_Callback_Clock = Clock.create("&I2C_ADC_Read_Density_Callback", 100, clock31Params);

var clock19Params           = new Clock.Params();
clock19Params.instance.name = "I2C_ADC_Read_Temp_Callback_Clock";
Program.global.I2C_ADC_Read_Temp_Callback_Clock = Clock.create("&I2C_ADC_Read_Temp_Callback", 100, clock19Params);

var clock20Params           = new Clock.Params();
clock20Params.instance.name = "I2C_ADC_Read_VREF_Callback_Clock";
Program.global.I2C_ADC_Read_VREF_Callback_Clock = Clock.create("&I2C_ADC_Read_VREF_Callback", 100, clock20Params);

var clock33Params            = new Clock.Params();
clock33Params.instance.name  = "logData_Clock";
clock33Params.period         = 1000;
Program.global.logData_Clock = Clock.create("&ISR_logData", 1000, clock33Params); // 2000 ticks x 150 us =  0.3 secs

var clock34Params            = new Clock.Params();
clock34Params.instance.name  = "i2c_temp_Clock";
clock34Params.period         = 1000; 
Program.global.i2c_temp_Clock = Clock.create("&ISR_i2c_temp", 600, clock34Params); // 1600 ticks x 150 us =  0.24 secs

var clock35Params            = new Clock.Params();
clock35Params.instance.name  = "i2c_vref_Clock";
clock35Params.period         = 1000;
Program.global.i2c_vref_Clock = Clock.create("&ISR_i2c_vref", 600, clock35Params); // 1600 ticks x 150 us =  0.24 secs

var clock36Params            = new Clock.Params();
clock36Params.instance.name  = "i2c_rrtc_Clock";
clock36Params.period         = 1000;
Program.global.i2c_rrtc_Clock = Clock.create("&ISR_i2c_rrtc", 600, clock36Params); // 1600 ticks x 150 us =  0.24 secs

var clock37Params            = new Clock.Params();
clock37Params.instance.name  = "i2c_density_Clock";
clock37Params.period         = 1000;
Program.global.i2c_density_Clock = Clock.create("&ISR_i2c_density", 600, clock37Params); // 1600 ticks x 150 us =  0.24 secs

var clock38Params            = new Clock.Params();
clock38Params.instance.name  = "i2c_wrtc_Clock";
clock38Params.period         = 1000;
Program.global.i2c_wrtc_Clock = Clock.create("&ISR_i2c_wrtc", 600, clock38Params); // 1600 ticks x 150 us =  0.24 secs

var clock39Params            = new Clock.Params();
clock39Params.instance.name  = "i2c_ao_Clock";
clock39Params.period         = 1000;
Program.global.i2c_ao_Clock  = Clock.create("&ISR_i2c_ao", 600, clock39Params); // 1600 ticks x 150 us =  0.24 secs

var clock40Params            = new Clock.Params();
clock40Params.instance.name  = "i2c_xpandr_Clock";
Program.global.i2c_xpandr_Clock = Clock.create("&I2C_xpandr", 1600, clock40Params); 

///////////////////////////////////////////////////////
/// semaphore
///////////////////////////////////////////////////////

var semaphore1Params        = new Semaphore.Params();
semaphore1Params.instance.name = "Menu_sem";
semaphore1Params.mode       = Semaphore.Mode_BINARY;
Program.global.Menu_sem     = Semaphore.create(0, semaphore1Params);

var sem2Params        		= new Semaphore.Params();
sem2Params.instance.name 	= "logData_sem";
sem2Params.mode       		= Semaphore.Mode_BINARY;
Program.global.logData_sem  = Semaphore.create(0, sem2Params);

var sem3Params        		= new Semaphore.Params();
sem3Params.instance.name 	= "i2c_temp_sem";
sem3Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_temp_sem = Semaphore.create(0, sem3Params);

var sem4Params        		= new Semaphore.Params();
sem4Params.instance.name 	= "i2c_vref_sem";
sem4Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_vref_sem = Semaphore.create(0, sem4Params);

var sem5Params        		= new Semaphore.Params();
sem5Params.instance.name 	= "i2c_rrtc_sem";
sem5Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_rrtc_sem = Semaphore.create(0, sem5Params);

var sem6Params        		= new Semaphore.Params();
sem6Params.instance.name 	= "i2c_density_sem";
sem6Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_density_sem = Semaphore.create(0, sem6Params);

var sem7Params        		= new Semaphore.Params();
sem7Params.instance.name 	= "i2c_wrtc_sem";
sem7Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_wrtc_sem = Semaphore.create(0, sem7Params);

var sem8Params        		= new Semaphore.Params();
sem8Params.instance.name 	= "i2c_ao_sem";
sem8Params.mode       		= Semaphore.Mode_BINARY;
Program.global.i2c_ao_sem   = Semaphore.create(0, sem8Params);


///
///  Timer 
///
/* User Timer0 for SYS/BIOS default clock tick (1ms) */
Clock.timerId               = 0; 
Clock.swiPriority           = 15;

Timer.anyMask               = 2;
var timer0Params            = new Timer.Params();
timer0Params.instance.name  = "counterTimerHandle";
timer0Params.intNum         = 9;
timer0Params.arg            = 500000;
timer0Params.period         = 500000;
timer0Params.startMode      = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer0Params.runMode        = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.counterTimerHandle = Timer.create(2, "&Count_Freq_Pulses", timer0Params);

var timer1Params            = new Timer.Params();
timer1Params.instance.name  = "delayTimerHandle";
timer1Params.intNum         = 8;
timer1Params.arg            = 0;
timer1Params.period         = 1000000; // 1 sec
timer1Params.startMode      = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer1Params.runMode        = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.delayTimerHandle = Timer.create(Timer.ANY, "&delayTmrIsr", timer1Params);

///
/// HWI
///
Hwi.dispatcherAutoNestingSupport = true;

var hwi0Params              = new Hwi.Params();
hwi0Params.instance.name    = "UART_Hwi";
hwi0Params.eventId          = 69;
hwi0Params.arg              = 0;
hwi0Params.maskSetting      = xdc.module("ti.sysbios.interfaces.IHwi").MaskingOption_SELF;
hwi0Params.enableInt        = false;
Program.global.UART_Hwi     = Hwi.create(5, "&UART_HWI_ISR", hwi0Params);

var hwi1Params              = new Hwi.Params();
hwi1Params.instance.name    = "I2C_Hwi";
hwi1Params.eventId          = 36;
hwi1Params.maskSetting      = xdc.module("ti.sysbios.interfaces.IHwi").MaskingOption_SELF;
hwi1Params.enableInt        = false;
hwi1Params.arg              = 0;
Program.global.I2C_Hwi      = Hwi.create(6, "&I2C_HWI_ISR", hwi1Params);

///
/// SWI
///
var swi0Params              = new Swi.Params();
swi0Params.instance.name    = "Swi_I2C_RX";
swi0Params.priority         = 4;
Program.global.Swi_I2C_RX   = Swi.create("&I2C_RX_Fxn", swi0Params);

var swi1Params              = new Swi.Params();
swi1Params.instance.name    = "Swi_I2C_TX";
swi1Params.priority         = 9;
Program.global.Swi_I2C_TX   = Swi.create("&I2C_TX_Fxn", swi1Params);

var swi3Params              = new Swi.Params();
swi3Params.instance.name    = "Swi_Modbus_RX";
swi3Params.priority         = 12;
Program.global.Swi_Modbus_RX = Swi.create("&Modbus_RX", swi3Params);

var swi3Params0             = new Swi.Params();
swi3Params0.instance.name   = "Swi_writeNand";
swi3Params0.priority        = 4;
Program.global.Swi_writeNand = Swi.create("&writeNand", swi3Params0);

var swi4Params              = new Swi.Params();
swi4Params.instance.name    = "Swi_Poll";
swi4Params.priority         = 3;
swi4Params.trigger          = 0;
Program.global.Swi_Poll     = Swi.create("&Poll", swi4Params);

var swi5Params              = new Swi.Params();
swi5Params.instance.name    = "Swi_REG_OIL_SAMPLE";
swi5Params.priority         = 1;
Program.global.Swi_REG_OIL_SAMPLE = Swi.create("&Calibrate_Oil", swi5Params);

var swi6Params              = new Swi.Params();
swi6Params.instance.name    = "Swi_REG_STREAM";
swi6Params.priority         = 1;
Program.global.Swi_REG_STREAM = Swi.create("&getStreamData", swi6Params);

var swi7Params              = new Swi.Params();
swi7Params.instance.name    = "Swi_Set_REG_DENSITY_CAL_Unit";
swi7Params.priority         = 1;
Program.global.Swi_Set_REG_DENSITY_CAL_Unit = Swi.create("&Set_REG_DENSITY_CAL_Unit", swi7Params);

var swi11Params             = new Swi.Params();
swi11Params.instance.name   = "Swi_REG_OIL_ADJUST";
swi11Params.priority        = 1;
Program.global.Swi_REG_OIL_ADJUST = Swi.create("&saveStreamData", swi11Params);

var swi12Params             = new Swi.Params();
swi12Params.instance.name   = "Swi_Apply_Density_Adj";
swi12Params.priority        = 1;
Program.global.Swi_Apply_Density_Adj = Swi.create("&Apply_Density_Adj", swi12Params);

var swi13Params             = new Swi.Params();
swi13Params.instance.name   = "Swi_upgradeFirmware";
swi13Params.priority        = 1;
Program.global.Swi_upgradeFirmware = Swi.create("&upgradeFirmware", swi13Params);

var swi14Params             = new Swi.Params();
swi14Params.instance.name   = "Swi_uploadCsv";
swi14Params.priority        = 1;
Program.global.Swi_uploadCsv = Swi.create("&uploadCsv", swi14Params);

var swi15Params             = new Swi.Params();
swi15Params.instance.name   = "Swi_downloadCsv";
swi15Params.priority        = 1;
Program.global.Swi_downloadCsv = Swi.create("&downloadCsv", swi15Params);

var swi16Params             = new Swi.Params();
swi16Params.instance.name   = "Swi_scanCsvFiles";
swi16Params.priority        = 1;
Program.global.Swi_scanCsvFiles = Swi.create("&scanCsvFiles", swi16Params);

var swi18Params             = new Swi.Params();
swi18Params.instance.name   = "Swi_usbhMscDriveOpen";
swi18Params.priority        = 1;
Program.global.Swi_usbhMscDriveOpen  = Swi.create("&usbhMscDriveOpen", swi18Params);

var swi19Params             = new Swi.Params();
swi19Params.instance.name   = "Swi_enumerateUsb";
swi19Params.priority        = 1;
Program.global.Swi_enumerateUsb  = Swi.create("&enumerateUsb", swi19Params);

var swi20Params             = new Swi.Params();
swi20Params.instance.name   = "Swi_changeTime";
swi20Params.priority        = 1;
Program.global.Swi_changeTime  = Swi.create("&changeTime", swi20Params);


///
/// no logging
///
LoggingSetup.sysbiosHwiLogging = false;
LoggingSetup.sysbiosSwiLogging = false;
LoggingSetup.loadTaskLogging = false;
LoggingSetup.loadSwiLogging = false;
LoggingSetup.loadHwiLogging = false;
